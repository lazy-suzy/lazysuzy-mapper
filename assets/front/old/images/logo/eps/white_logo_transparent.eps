%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2354 588
%%HiResBoundingBox: 0 0 2354 588
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2354 588 re
W
q
[1 0 0 -1 0 588] cm
q
0 0 2354 587.93896 re
W*
q
[0.748014 0 0 0.748014 0 -587.93896] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0 0 3147 1579 re
f
Q
Q
q
5.984112 0 2348.0159 587.19104 re
W*
q
[20.778994 0 0 20.785616 621.11609 -20.301193] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
3.457 23.124994 m
4.225229 23.124994 4.931609 23.092442 5.57614 23.027338 c
6.220672 22.962234 6.783838 22.887363 7.26564 22.802729 c
7.825536 22.711582 8.336604 22.60416 8.798843 22.480463 c
8.515643 24.062464 l
8.437518 24.055954 8.320331 24.049442 8.164081 24.042933 c
8.007831 24.036423 7.833677 24.029911 7.641621 24.023401 c
7.449564 24.016891 7.247741 24.012009 7.036151 24.008753 c
6.82456 24.005497 6.624363 24.002243 6.43556 23.998987 c
6.246757 23.995731 6.079114 23.992477 5.932631 23.989222 c
5.786148 23.985966 5.680354 23.984339 5.615251 23.984339 c
1.396451 23.984339 l
1.396451 23.945276 l
1.435513 23.808558 1.472948 23.639286 1.508755 23.437464 c
1.544562 23.235641 1.575487 22.984991 1.601528 22.685514 c
1.62757 22.386038 1.647101 22.029604 1.660122 21.616215 c
1.673144 21.202826 1.679654 20.719425 1.679653 20.166016 c
1.679653 13.808616 l
1.679653 13.25523 1.673143 12.771832 1.660122 12.35842 c
1.647101 11.945009 1.62757 11.586943 1.601528 11.284221 c
1.575486 10.981499 1.544562 10.729219 1.508755 10.527381 c
1.472948 10.325542 1.435515 10.156273 1.396455 10.019571 c
1.396455 9.980508 l
3.740255 9.980508 l
3.740255 10.019571 l
3.701192 10.15629 3.663758 10.325561 3.62795 10.527384 c
3.592143 10.729207 3.562846 10.981486 3.540059 11.284224 c
3.517272 11.586961 3.497741 11.945027 3.481465 12.358423 c
3.465189 12.771819 3.457051 13.25522 3.457051 13.808623 c
3.457051 23.125023 l
3.457 23.124994 l
h
16.855518 20.683575 m
16.196339 20.683575 l
15.332079 20.683575 l
14.365279 20.683575 l
14.365279 20.683575 14.049522 20.685202 13.418009 20.688457 c
12.786495 20.691713 12.513059 20.694967 12.597699 20.698223 c
12.68234 20.701479 12.490283 20.703106 12.021529 20.703106 c
11.660199 21.464827 l
11.503949 21.777327 11.370485 22.049137 11.259809 22.280256 c
11.149132 22.511375 11.057984 22.714827 10.986368 22.890606 c
10.914752 23.066385 10.862668 23.217752 10.830118 23.344706 c
10.797568 23.471659 10.781292 23.590475 10.78129 23.701155 c
10.78129 23.77277 10.784545 23.826481 10.791056 23.862288 c
10.797566 23.898094 10.807332 23.925764 10.820353 23.945295 c
10.820353 23.984358 l
9.101553 23.984358 l
9.101553 23.945295 l
9.147126 23.899723 9.218741 23.800438 9.316397 23.647444 c
9.414053 23.49445 9.526357 23.307276 9.653307 23.085924 c
9.780257 22.864573 9.916978 22.613922 10.063467 22.333975 c
10.209956 22.054028 10.354814 21.764313 10.498037 21.464834 c
14.482437 13.242134 l
15.214857 13.242134 l
19.121157 21.464834 l
19.270897 21.777334 19.422264 22.076813 19.575258 22.363272 c
19.728252 22.649731 19.869854 22.905264 20.000059 23.129871 c
20.130264 23.354479 20.244198 23.540026 20.34186 23.686512 c
20.439522 23.832998 20.504625 23.91926 20.53717 23.945301 c
20.53717 23.984364 l
18.03717 23.984364 l
18.050192 23.93228 18.056702 23.88508 18.056702 23.842762 c
18.056702 23.701162 l
18.056702 23.557934 18.025778 23.385406 17.963928 23.183584 c
17.902079 22.981762 17.827209 22.775055 17.739319 22.563465 c
17.651428 22.351875 17.560282 22.148426 17.465879 21.953115 c
17.371477 21.757805 17.294981 21.595045 17.236389 21.464836 c
16.855518 20.683575 l
h
12.402319 19.921875 m
12.998019 19.921875 l
13.271457 19.921875 13.562798 19.920248 13.872043 19.916992 c
14.181288 19.913736 14.492161 19.912109 14.804663 19.912109 c
15.117165 19.912109 15.419898 19.910482 15.712863 19.907227 c
16.005827 19.903971 16.269501 19.902344 16.503883 19.902344 c
14.482384 15.585943 l
12.402319 19.921875 l
h
23.017553 23.242186 m
26.103453 23.242186 l
26.637306 23.242186 27.128843 23.212889 27.578062 23.154295 c
28.027281 23.095701 28.417913 23.030598 28.749962 22.958984 c
29.134077 22.87435 29.482384 22.776693 29.794884 22.666016 c
29.335903 24.062515 l
29.251268 24.056005 29.109667 24.047867 28.911098 24.038101 c
28.71253 24.028336 28.50094 24.01857 28.276329 24.008804 c
28.051718 23.999039 27.841757 23.992529 27.646448 23.989273 c
27.451139 23.986017 27.314419 23.98439 27.236288 23.98439 c
20.595688 23.98439 l
20.595688 23.72072 l
27.363289 14.22852 l
24.999989 14.22852 l
24.433582 14.22852 23.916004 14.259445 23.447254 14.321294 c
22.978504 14.383143 22.568338 14.449876 22.216755 14.521494 c
21.813108 14.60613 21.442015 14.70053 21.103474 14.804697 c
21.757774 13.408197 l
21.842409 13.421218 21.987267 13.430984 22.192345 13.437494 c
22.397423 13.444005 22.612267 13.452143 22.836874 13.461908 c
23.061481 13.471674 23.269815 13.478185 23.461874 13.48144 c
23.653933 13.484695 23.785769 13.486322 23.857384 13.486322 c
29.824184 13.486322 l
29.824184 13.662103 l
23.017553 23.242186 l
h
36.035149 19.960976 m
36.035149 20.546913 36.04166 21.057981 36.05468 21.494179 c
36.067699 21.930376 36.085606 22.306343 36.108391 22.622078 c
36.131176 22.937813 36.160473 23.203114 36.196281 23.417978 c
36.23209 23.632843 36.272778 23.808624 36.318352 23.945318 c
36.318352 23.984381 l
34.052753 23.984381 l
34.052753 23.945318 l
34.098328 23.808599 34.139015 23.632818 34.174824 23.417974 c
34.210632 23.203131 34.239929 22.93783 34.262714 22.622074 c
34.2855 22.306318 34.303406 21.930351 34.316425 21.494175 c
34.329445 21.057999 34.335957 20.546932 34.335957 19.960976 c
34.335957 19.287146 l
30.820356 14.648445 l
30.585981 14.335945 30.361372 14.083667 30.146528 13.891609 c
29.931684 13.699552 29.768925 13.577482 29.658249 13.525399 c
29.658249 13.486336 l
32.431648 13.486336 l
32.431648 13.603523 32.473965 13.784187 32.558601 14.028328 c
32.643238 14.272469 32.815762 14.570318 33.07618 14.921878 c
35.556679 18.203178 l
38.095779 14.785178 l
38.278072 14.537783 38.416416 14.293642 38.510818 14.052756 c
38.605221 13.811871 38.65242 13.623068 38.65242 13.486346 c
40.439522 13.486346 l
40.439522 13.52541 l
40.27676 13.636087 40.109119 13.776061 39.936592 13.945332 c
39.764065 14.114602 39.563869 14.355489 39.336002 14.667992 c
36.035202 19.140692 l
36.035202 19.961002 l
36.035149 19.960976 l
h
47.275364 12.207375 m
47.060524 12.207375 l
47.008442 12.057635 46.925434 11.888364 46.811501 11.699562 c
46.697567 11.51076 46.547829 11.33335 46.362282 11.167332 c
46.176735 11.001313 45.952126 10.862967 45.688454 10.752292 c
45.424782 10.641617 45.113907 10.586276 44.755833 10.586271 c
44.436821 10.586271 44.153618 10.635099 43.906223 10.732756 c
43.658829 10.830412 43.452122 10.967132 43.286102 11.142916 c
43.120083 11.3187 42.994759 11.527033 42.910122 11.767916 c
42.825485 12.008799 42.783169 12.275725 42.783173 12.568696 c
42.783173 13.037446 42.915009 13.485037 43.17868 13.91147 c
43.442352 14.337902 43.772755 14.759435 44.169891 15.176069 c
44.567028 15.592704 44.996727 16.009371 45.458992 16.426069 c
45.921257 16.842768 46.350956 17.275702 46.748093 17.724869 c
47.145229 18.174036 47.475632 18.644403 47.739304 19.135969 c
48.002975 19.627535 48.134811 20.156502 48.134815 20.72287 c
48.134815 21.146048 48.061573 21.570852 47.915089 21.997284 c
47.768604 22.423716 47.542366 22.806215 47.236378 23.144783 c
46.930389 23.483351 46.536522 23.758417 46.054779 23.969982 c
45.573036 24.181547 45.000103 24.287342 44.335979 24.287363 c
43.964886 24.287363 43.611694 24.253183 43.276409 24.184824 c
42.941124 24.116465 42.631878 24.031828 42.348679 23.930914 c
42.065479 23.83 41.811573 23.720949 41.58696 23.603764 c
41.362347 23.486578 41.178429 23.379154 41.035198 23.281494 c
41.259808 21.123295 l
41.503948 21.123295 l
41.575562 21.429285 41.692749 21.720625 41.855511 21.997318 c
42.018272 22.274012 42.218468 22.51815 42.4561 22.729738 c
42.693733 22.941326 42.965542 23.110596 43.27153 23.237549 c
43.577518 23.364502 43.912819 23.427979 44.277431 23.427979 c
44.609463 23.427979 44.907314 23.377523 45.170986 23.276611 c
45.434658 23.175699 45.660896 23.035727 45.849697 22.856691 c
46.038498 22.677656 46.183357 22.464439 46.284267 22.217041 c
46.385178 21.969643 46.435635 21.699459 46.435638 21.40649 c
46.435638 20.996334 46.360767 20.617102 46.211029 20.268795 c
46.061291 19.920488 45.864349 19.590084 45.620209 19.277584 c
45.376068 18.965084 45.099377 18.662352 44.790131 18.369385 c
44.480885 18.076418 44.163502 17.781822 43.837982 17.485596 c
43.512463 17.189369 43.19508 16.885006 42.885834 16.572506 c
42.576588 16.260006 42.299896 15.926339 42.055756 15.571506 c
41.811615 15.216672 41.614674 14.835805 41.464935 14.428905 c
41.315197 14.022006 41.240326 13.574406 41.240326 13.086105 c
41.240326 12.571782 41.339611 12.107915 41.538177 11.694504 c
41.736744 11.281093 42.00042 10.927893 42.329197 10.634904 c
42.657974 10.341915 43.030708 10.117306 43.447395 9.961074 c
43.864082 9.804842 44.293781 9.726716 44.736496 9.726694 c
45.062016 9.726694 45.361496 9.752736 45.634933 9.804819 c
45.908371 9.856902 46.154137 9.918753 46.372234 9.990369 c
46.590332 10.061985 46.780762 10.133598 46.943523 10.205209 c
47.106285 10.276819 47.23975 10.335412 47.343914 10.380989 c
47.275364 12.207375 l
h
58.457024 17.460976 m
58.457024 16.881548 58.45377 16.376991 58.447258 15.947304 c
58.440746 15.517616 58.427727 15.146516 58.408195 14.834003 c
58.388664 14.521491 58.365879 14.259447 58.339836 14.047873 c
58.313793 13.8363 58.281242 13.662147 58.24218 13.525414 c
58.24218 13.48635 l
59.677681 13.48635 l
59.677681 13.525414 l
59.638618 13.662132 59.606068 13.837914 59.580025 14.052757 c
59.553982 14.267601 59.531197 14.532901 59.511665 14.848658 c
59.492134 15.164414 59.479115 15.538748 59.472603 15.971658 c
59.466091 16.404568 59.462837 16.914001 59.462837 17.499958 c
59.462837 20.302658 l
59.462837 21.005783 59.353786 21.604742 59.135689 22.099533 c
58.917591 22.594324 58.616482 22.999592 58.232368 23.315332 c
57.848255 23.631073 57.390888 23.862194 56.860268 24.008692 c
56.329647 24.15519 55.748581 24.228434 55.117069 24.228422 c
54.47905 24.228422 53.8866 24.158436 53.339725 24.018461 c
52.79285 23.878487 52.319218 23.655504 51.918827 23.349512 c
51.518436 23.04352 51.202679 22.646387 50.971558 22.158112 c
50.740437 21.669836 50.624874 21.077404 50.624878 20.380812 c
50.624878 17.499912 l
50.624878 16.913975 50.618366 16.404535 50.605347 15.971592 c
50.592327 15.53865 50.572796 15.164316 50.546753 14.848592 c
50.52071 14.532867 50.491413 14.267568 50.458862 14.052692 c
50.426311 13.837815 50.387245 13.662035 50.341671 13.525352 c
50.341671 13.486288 l
52.597572 13.486288 l
52.597572 13.525352 l
52.551998 13.66207 52.512936 13.836224 52.480385 14.047813 c
52.447834 14.259401 52.420162 14.521444 52.397377 14.833942 c
52.374592 15.146441 52.356686 15.517541 52.343666 15.947243 c
52.330647 16.376946 52.324135 16.881512 52.324135 17.460943 c
52.324135 20.380844 l
52.324135 20.960272 52.412025 21.437159 52.587807 21.811508 c
52.763588 22.185858 52.994709 22.483707 53.281166 22.705059 c
53.567623 22.926411 53.893143 23.081034 54.257725 23.168928 c
54.622307 23.256823 54.996639 23.30077 55.380726 23.300768 c
55.771351 23.300768 56.150581 23.256823 56.518421 23.168932 c
56.886261 23.081041 57.215034 22.926418 57.504749 22.705063 c
57.794464 22.483707 58.025581 22.185858 58.198109 21.811512 c
58.370636 21.437166 58.456898 20.960266 58.456898 20.380812 c
58.456898 17.460911 l
58.457024 17.460976 l
h
63.515598 23.242186 m
66.601501 23.242186 l
67.135353 23.242186 67.626892 23.212889 68.076111 23.154295 c
68.52533 23.095701 68.915962 23.030598 69.248009 22.958984 c
69.632126 22.87435 69.980431 22.776693 70.292931 22.666016 c
69.833954 24.062515 l
69.749321 24.056005 69.607719 24.047867 69.409149 24.038101 c
69.210579 24.028336 68.998993 24.01857 68.774376 24.008804 c
68.549759 23.999039 68.339798 23.992529 68.144493 23.989273 c
67.949188 23.986017 67.812469 23.98439 67.734337 23.98439 c
61.093735 23.98439 l
61.093735 23.72072 l
67.861336 14.22852 l
65.498039 14.22852 l
64.931633 14.22852 64.414055 14.259445 63.945305 14.321294 c
63.476555 14.383143 63.066387 14.449876 62.714806 14.521494 c
62.311161 14.60613 61.940067 14.70053 61.601524 14.804697 c
62.255825 13.408197 l
62.340462 13.421218 62.485317 13.430984 62.690395 13.437494 c
62.895473 13.444005 63.110317 13.452143 63.334927 13.461908 c
63.559536 13.471674 63.767868 13.478185 63.959927 13.48144 c
64.151985 13.484695 64.283821 13.486322 64.355438 13.486322 c
70.322235 13.486322 l
70.322235 13.662103 l
63.515598 23.242186 l
h
76.533195 19.960976 m
76.533195 20.546913 76.539703 21.057981 76.552727 21.494179 c
76.56575 21.930376 76.583649 22.306343 76.606438 22.622078 c
76.629227 22.937813 76.658524 23.203114 76.694328 23.417978 c
76.730133 23.632843 76.770828 23.808624 76.816399 23.945318 c
76.816399 23.984381 l
74.550797 23.984381 l
74.550797 23.945318 l
74.596367 23.808599 74.637062 23.632818 74.672867 23.417974 c
74.708672 23.203131 74.737968 22.93783 74.760757 22.622074 c
74.783546 22.306318 74.801445 21.930351 74.814468 21.494175 c
74.827492 21.057999 74.834 20.546932 74.834 19.960976 c
74.834 19.287146 l
71.318398 14.648445 l
71.084023 14.335945 70.859413 14.083667 70.644569 13.891609 c
70.429726 13.699552 70.266968 13.577482 70.156288 13.525399 c
70.156288 13.486336 l
72.929688 13.486336 l
72.929688 13.603523 72.972008 13.784187 73.056641 14.028328 c
73.141273 14.272469 73.313805 14.570318 73.574219 14.921878 c
76.054718 18.203178 l
78.593819 14.785178 l
78.776108 14.537783 78.914459 14.293642 79.008858 14.052756 c
79.103256 13.811871 79.150459 13.623068 79.150459 13.486346 c
80.937561 13.486346 l
80.937561 13.52541 l
80.774803 13.636087 80.607155 13.776061 80.434631 13.945332 c
80.262108 14.114602 80.061905 14.355489 79.834038 14.667992 c
76.533241 19.140692 l
76.533241 19.961002 l
76.533195 19.960976 l
h
f
Q
q
[22.474501 0 0 22.481665 68.429314 62.465103] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
17 21 m
7 21 l
4.791 21 3 19.209 3 17 c
3 7 l
3 4.791 4.791 3 7 3 c
17 3 l
19.209 3 21 4.791 21 7 c
21 17 l
21 19.209 19.209 21 17 21 c
h
19 7 m
19 5.895 18.105 5 17 5 c
7 5 l
5.895 5 5 5.895 5 7 c
5 17 l
5 18.105 5.895 19 7 19 c
17 19 l
18.105 19 19 18.105 19 17 c
19 7 l
h
12 16.5 m
9.514999 16.5 7.5 14.485 7.5 12 c
7.5 9.515 9.515 7.5 12 7.5 c
14.485001 7.5 16.5 9.515 16.5 12 c
16.5 14.485 14.485 16.5 12 16.5 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
